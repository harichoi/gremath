Gremath 문법 공부

차례

1. 연산자
2. 괄호 사용법
3. 특수 문자 사용법
4. 함수 사용법
5. 차원 바꾸기(숫자..)
6. 계속 이어지게 만들기
7. 눈금 보이기, 감춤
8. 범위 주기
9. 에니메이션
10. 기초 문제
11. 고난이도 문제
12. x콘트롤의 기초와 활용
13. 2, 3차원의 활용
14. Grid 표시(미완성)

1. 연산자
+, -, *, /, ^, % 를 연산자라고 한다.

(1) 더하기(+)
앞에 숫자와 뒤에 숫자를 더하기할때 쓰인다. 우선순위는 낮다.
앞, 뒤에 변수, 상수 아무거나 올 수 있다.
ex) 1+2 
    x+4
    x+y
    4+x
(2) 빼기(-)
앞에 숫자에다가 뒤에 숫짜를 뺄때 사용한다. 우선순위는 더하기와 똑같다.
앞, 뒤에 변수, 상수 아무거나 올 수 있다.
ex) 1-2
    x-4
    x-y
    4-x
(3) 곱하기(*)
앞에 숫자와 뒤에 숫자를 곱할때 쓰인다. 우선순위는 더하기나, 빼기보다 높다.
마찬가지로 앞, 뒤에 변수, 상수 아무거나 올 수 있다.
ex) 1*2
    x*4
    x*y
    4*y

★★★★★★★★ 4x, xy 꼴은 불가능하다. 무조건 풀어서 적어야 한다.

(4) 나누기(/)
앞에 숫자에다가 뒤에 숫자를 나눌때 쓰인다. 우선순위는 곱하기와 같다.
역시 앞, 뒤에 변수, 상수 아무거나 올 수 있다.
ex) 1/2
    x/4
    x/y
    4/y
(5) 지수(^)
앞에 숫자에다가 뒤에 숫자만큼 곱한것을 지수라고 한다. 이것도 역시 앞, 뒤에 변수, 상수 아무거나 올 수 있다.
ex) 1^2  => 1*1
    x^4  => x*x*x*x
    x^y  => x*x*......(y번)
    4^y  => 4*4*......(y번)


2. 괄호 사용법
괄호는 우선순위 변경하기 위해서 사용된다. 예를들어 1+2*3 이 있다고 치면, *가 우선순위가 높으니까, 2*3 부터 계산한다. 그런데 1+2 부터 계산하고 싶다하면 (1+2)*3 이라고 하면 된다.

3. 특수 문자 사용법
gremath 에서 지원하는 변수는 2개다
e, 파이(원주율)

(1) e
이것은 자연로그이며 2.71... 이다. 구하는 방법은

lim         (1+1/n)^n   
n->무한대

이다.

(2) 파이(원주율)
이것은 원의 둘레를 구하기 위해 많이 사용하며 3.1415926535897932384626433832795028851971693993751058209749445923078164062802089986280348253421170679 이다.
라디안에서도 쓰이는데 180'를 의미한다.

4. 함수 사용법
함수의 종류에는 여러가지가 있다.
sqrt, abs, cos, sin, tan, ln, log, rtn, ntr, exp 가 있다.

(1) sqrt(a)
한글로는 제곱근이라고 하며, 영어로는 루뜨이다.
예) sqrt(4)   => 2
sqrt(16)      => 4

(2) abs(a)
한글로는 절대값이며, 부호를 양수로 바꾸어준다.
abs(-5) => 5

(3) cos(a)
삼각함수중에 코싸인이라고 불리는 함수이다.
**이 프로그램에서는 라디안으로 계산한다는 점에 유의,,

(4) sin(a)
삼각함수중에 싸인이라고 불리는 함수이다.
**이 프로그램에서는 라디안으로 계산한다는 점에 유의,,

(5) tan(a)
삼각함수중에 탄젠트라고 불리는 함수이다.
**이 프로그램에서는 라디안으로 계산한다는 점에 유의,,

(6) ln(a)
log _e x 꼴로 되어있다. e^x = a 일때  x 를 구하는 함수이다.

(7) log(a)
log _10 x 꼴로 되어있다. 10^x = a 일때 x 를 구하는 함수이다.

(8) rtn(a)
라디안을 '(도) 로 바꾸는 함수이다.
rtn(p) => 180'
p 는 파이 라고 앞에서 강좌했다.

(9) ntr(a)
'(도) 를 라디안으로 바꾸는 함수이다.
rtn(180) => p

(10) exp(a)
e^a 를 구하는 함수이다.

(11) xcon(a)
이것은 12. 강의에 있다.

5. 차원 바꾸기
Gremath 에서는 2, 3 차원이 존재한다.

(1) 2차원
제일 앞에 #2d 라고 적어놓고 뒤에 식을 쓴다.
먼저 한번 썻으면 다시 #2d 를 적을 필요가 없다.
평면으로 y=........... 꼴이다.
... 안에 들어갈수 있는 변수는 x 하나 뿐이다.

#2d x^2
#2d x^3

(2) 3차원
제일 앞에 #3d 라고 적어놓고 뒤에 식을 쓴다.
먼저 한번 썻으면 다시 #3d 를 적을 필요가 없다.
입체로 z=............ 꼴이다.
... 안에 들어갈수 있는 변수는 x, y 두개다.

#3d cos(sqrt(x^2+y^2))*4
#3d 10/exp(0.1*(x^2+2*y^2))

6. 계속 이어지게 만들기
(1) 계속 이어지게
제일 앞에 #continue 를 쓰고 그린다.
역시 한번 쓰면 기억된다.

(2) 계속 이어지는거 멈추게
제일 앞에 #stop 를 쓰고 그린다.
역시 한번 쓰면 기억된다.

7. 눈금 보이기, 감춤
(1) 눈금 보이기
제일 앞에 #gridshow 를 쓰고 식을 쓴다.
역시 한번 쓰면 기억된다.

(2) 눈금 감추기
제일 앞에 #gridhide 를 쓰고 식을 쓴다.
역시 한번 쓰면 기억된다.

8. 범위 주기
제일 앞에 #x a b 을 적는다
만약에 -5 ~ 10 까지 하고 싶다면
#x -5 10 을 적고 식을 쓰면 된다.
이것은 기억되지 않으므로 계속 써야된다.

9. 에니메이션
꼴은 #animation a b 식 형태이다.
a와 b 사이에서는 1씩 증가된다.
#animation 1 100 이라고 쓰면 1~100 까지 돈다는 이야기다.
에니메이션에서는 변수를 t 라고 쓴다. 컴퓨터가 제일 빠른
컴퓨터에서 돌리면 다시뜨는데 0.3초이고 보통 컴퓨터에서는
0.4~0.7초, 느린컴퓨터에서는 1초에 한번씩 뜬다.
에니메이션을 한뒤에 종료를 할려면 앞에다가
#closeanimation 명령어를 치면 된다. 
 
#animation 1 1000 7*sin(x/cos(t/10))+5*sin(x/cos((t/10)/2))

10. 기초문제
(1) 눈금을 감추고, ln x 를 구하고 싶다면?

(2) sin(x') 를 구하고 싶다면?
(단 x 는 라디안이 아니다)

(3) 3차원 에서 z=x+y+z 인 함수를 만들고자 한다면?

(4) y=x^2 , y=-x^2+10 2개의 함수를 보고싶다면?

(5) 각 반지름당 원의 둘레의 길이를 구하고싶다. x 축은 반지름, y축은 그때 해당하는 원의 둘레 일때 가장 간단한 식을 쓴다면?

(6) 3차원 z = 상용로그 x + 자연로그 y 보고싶을때는?

(7) 3차원 z = (x+y)/t(0~100) 을 보고싶을때는?

11. 고난이도 문제

(1) 3차원에서 (0,0,0) 의 중심으로 물결파 모양의 파동을 그리게 할려면?

(2) 2차원에서 가운데 부분을 위로 나오게 하고 양끝 부분은 0에 가깝도록 하려면?(고급기술 사용하면서 간단할때 점수 높음)

(3) 고무판위에 투명하고 무거운 물체를 놓았을때의 고무판의 왜곡을 상상하여 그리시오,

(4) 자신의 상상력을 펼치시오,

12. X콘트롤의 기초와 활용
함수명은 xcon 이다. xcon(a) 꼴로 이루어진다.
a>0 일경우 1을 리턴 시키고
a<0 일경우 0을 리턴 시킨다.
이 함수가 없다면 당신은 1,2,3,4,5 개의 식을
#continue 를 이용해 일리리 다 쳐야할것이다.

x<0 까지는 y=x^3 을 나타나고,
0<x 는 y=x^2*0.2 을 나타내려한다. 
그러면
xcon(-x)*x^3+xcon(x)*x^2*0.2 가 된다.

(1) -x<10 은 y=x 가 나타나게 하고
x>10 일떄는 y=-x 가 나타나게 하라.

13. 2, 3차원의 활용
사용법 : 왼쪽 하단에 보면 최소화 되어있는 창을 볼 수 있을것이다. 그것을 더블클릭하면 된다.

2,3 차원의 활용 윈도우에서는 "#" 명령어가 통하지 않는다.
꼭 #을 필요로 하는 경우에는 기존 윈도우를 사용한다.

이 윈도우에서는 세타, 베타 두개만 지원하고, 아주 유용하게 쓰일수 있다.

(1) 세타
t 라고 표현한다.
왼쪽 상단에 3개의 에디터 박스가 보일것인데
차례대로, 최소값, 최대값, 증가량 이다.
최소값은 항상 최대값보다 작아야한다.
!!증가량은 0은 불가능이다.
증가량이 작을경우에는 속도가 매우 늦어지므로 적당한 크기에서 해야된다.

(2) 베타
b 라고 표현한다.
오른쪽 상단에 3개의 에디터 박스가 보일것인데
차례대로, 최소값, 최대값, 증가량 이다.
최소값은 항상 최대값보다 작아야한다.
!!증가량은 0은 불가능이다.
증가량이 작을경우에는 속도가 매우 늦어지므로 적당한 크기에서 해야된다.

(3) 2차원 함수
기존 윈도우에서는 같은 x값 같기가 불가능하지만 여기서는 가능하다.
위쪽에서부터 2~3번째 에디터박스까지 사용하며 2번째는 x=에디터박스, 3번째는 y=에디터박스이다.

원그리기
(0, 360, 3) (0, 0, 1)
sin(ntr(t))
cos(ntr(t))
0

화산폭발
(-100,100,1) (-100,100,1)
t*b
t*b^2
t

(4) 3차원 함수
기존 윈도우에서는 f(x,y)=........ 꼴이어서 지구본 등을 그리기가 불가능 하였다.
위쪽에서부터 2~4번째 에디트박스까지 사용하며 2번째는 x=에디터박스, 3번째는 y=에디터박스, 4번째는 z=에디터박스 이다.

지구본 그리기
x축 간격, y축간격, z축간격을 모두다 100으로 맞추어야 잘 보인다.
(0, 360, 5) (0, 360, 5)
cos(ntr(t))*sin(ntr(b))
sin(ntr(t))
cos(ntr(t))*cos(ntr(b))

소라 그리기
(0 360 5) (0 1080 10)
2*(1-exp(ntr(t)/(6*p)))*cos(ntr(t))*cos(0.5*ntr(b))^2
2*(-1+exp(ntr(t)/(6*p)))*sin(ntr(t))*cos(0.5*ntr(b))^2
1-exp(ntr(t)/(3*p))-sin(ntr(b))+exp(ntr(t)/(6*p))*sin(ntr(b))